// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Neuranest
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreML
import Foundation
@_exported import Neuranest
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import os.log
import os
public enum validEnvs : Swift.String {
  case local
  case dev
  case stage
  case sandbox
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ModelPredictor {
  var modelId: Swift.String { get }
  func predict(images: [Swift.String : Any], mlModel: CoreML.MLModel, completion: @escaping ([Swift.String : Any]?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class ModelResult {
  @objc deinit
}
public struct SDKConfig {
  public let sdkVersion: Swift.String
  public let apiKey: Swift.String
  public let env: Swift.String
  public init(apiKey: Swift.String, env: Neuranest.validEnvs)
}
public class ConfigurationManager {
  public var config: Neuranest.SDKConfig?
  public init(with config: Neuranest.SDKConfig)
  public func getAPIKey() -> Swift.String?
  public func getAPIPath(pathName: Swift.String) -> Foundation.URL?
  @objc deinit
}
public class NNModel {
  final public let modelName: Swift.String
  final public let modelId: Swift.String
  final public let isCustomerModel: Swift.Bool
  public init(named modelName: Swift.String, modelId: Swift.String, isCustomerModel: Swift.Bool = false, configManager: Neuranest.ConfigurationManager)
  public func deleteModel() -> Swift.Bool
  public func getModel(completion: @escaping (CoreML.MLModel?) -> Swift.Void)
  public func loadModel(completion: @escaping (CoreML.MLModel?) -> Swift.Void)
  public func predict(data: [Swift.String : Any], completion: @escaping (Neuranest.ModelResult) -> Swift.Void)
  @objc deinit
}
extension Neuranest.validEnvs : Swift.Equatable {}
extension Neuranest.validEnvs : Swift.Hashable {}
extension Neuranest.validEnvs : Swift.RawRepresentable {}
